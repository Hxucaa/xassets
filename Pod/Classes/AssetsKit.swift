//
//  AssetsKit.swift
//  XAssets
//
//  Created by Connor Wang on 2015-06-25.
//  Copyright (c) 2015 ZenChat. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class AssetsKit : NSObject {

    //// Cache

    private struct Cache {
        static var primaryColor: UIColor = UIColor(red: 0.212, green: 0.663, blue: 0.647, alpha: 1.000)
        static var imageOfLandingIcon: UIImage?
        static var landingIconTargets: [AnyObject]?
    }

    //// Colors

    public class var primaryColor: UIColor { return Cache.primaryColor }

    //// Drawing Methods

    public class func drawLandingIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let iconFillColor = AssetsKit.primaryColor.colorWithAlpha(0.7)

        //// Group
        //// Polygon Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 19, 10)
        CGContextScaleCTM(context, 0.73, 0.73)

        var polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPointMake(131.6, 288.52))
        polygonPath.addLineToPoint(CGPointMake(260.27, 217.86))
        polygonPath.addLineToPoint(CGPointMake(260.27, 71.64))
        polygonPath.addLineToPoint(CGPointMake(131.6, 0))
        polygonPath.addLineToPoint(CGPointMake(0, 71.64))
        polygonPath.addLineToPoint(CGPointMake(0, 217.86))
        polygonPath.addLineToPoint(CGPointMake(131.6, 288.52))
        polygonPath.closePath()
        polygonPath.lineCapStyle = kCGLineCapSquare;

        polygonPath.lineJoinStyle = kCGLineJoinBevel;

        iconFillColor.setFill()
        polygonPath.fill()
        iconFillColor.setStroke()
        polygonPath.lineWidth = 10
        polygonPath.stroke()

        CGContextRestoreGState(context)


        //// Text Drawing
        let textRect = CGRectMake(23, 0, 185, 230)
        var textTextContent = NSString(string: "来")
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Center

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica-Bold", size: 120)!, NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        textTextContent.drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfLandingIcon: UIImage {
        if Cache.imageOfLandingIcon != nil {
            return Cache.imageOfLandingIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(230, 230), false, 0)
            AssetsKit.drawLandingIcon()

        Cache.imageOfLandingIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfLandingIcon!
    }

    //// Customization Infrastructure

    @IBOutlet var landingIconTargets: [AnyObject]! {
        get { return Cache.landingIconTargets }
        set {
            Cache.landingIconTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(AssetsKit.imageOfLandingIcon)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
